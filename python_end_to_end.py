# -*- coding: utf-8 -*-
"""Python End to End.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15cIognROin5dV6ETcX11hikDb7Yu3QLI

# **Python End to End**

Contents:

- Variable
- Data Type
- String
- Data Structure (list, tuple, dictionary, set)
- Function
- Control Flow
- OOP (Object Oriented Programming)
"""

# basic computation
print(1 + 1)
print(2 * 2)
print(5 / 2)
print(5 // 2) # floor division
print(6 - 4)
print(5 % 4) # modulo

# variable
income = 50000
expense = 28000
saving = income - expense

print(saving)

# string variable
my_name = 'Chaem' # "Chaem"
my_age = 24

print("Hello my name is " + my_name + "and I'm " + str(my_age) + " years old.")

# f-string
text = f"Hello! my name is {my_name} and I'm {my_age} years old"

print(text)

del text

print(text)

# type hinting # คำใบ้
# int float str bool

name: str = "Chaem"
age: int = 25
gpa: float = 3.52
movie_lover: bool = True # False

print(type(name))
print(type(age))
print(type(gpa))
print(type(movie_lover))
type(name) # quick

name = "Chaem"
isinstance(name, str) # Is this variable is a string?

gpa = 2
isinstance(gpa, float)

"""## **Function**"""

# create your own function

def greeting():
    print("Hello world")

greeting()

def greeting_name(name, city):
    print(f"Hello! {name}. We live in {city}.")

greeting_name("Chaem", "Bangkok")

greeting_name(city="Bangkok", name="Chaem")

## default argument
def greeting_name2(name, city="London"):
    print(f"Hello! {name}. We live in {city}.")

greeting_name2(name="David")

## get input from user
## input() get only string input

def greeting_name3():
    name = input("What's your name? ")
    print(f"Greeting {name}!")

greeting_name3()

# lambda function
def add_two_nums(a, b):
    return a+b

result = add_two_nums(10, 200)
print(result)

add_two_nums = lambda a,b: a+b
add_two_nums(10, 200)

greeting = lambda name: f"Hello! {name}"
result = greeting("Chaem")

print(result)

"""## **String**"""

long_text = """hello world
I'm learning python
It's as easy as R!
COOL!"""

print(long_text)

def greeting():
    """
        Greeting a user (DocString)
        input: user_name
        output: xxx
    """
    print("Hello!")

text = "a duck walks into a bar...."

len("Python")

# function vs. method
print(len(text))
print(text)

# method = functions designed for specific class
text = "a duck walks into a bar...."

# string methods
text.upper()
text = text.replace("duck", "lion")
print(text)

# strip
"     hello world      ".strip(" ")

text = text.strip(".")
print(text)

# count a
text.count("a")

# split and join text
split_text = text.split(" ")
print(split_text)

"-".join(split_text)

# subset/ indexing
# python index starts with 0

language = "Python"

len(language)

print(language[0])
print(language[1])
print(language[-1]) # the last character
print(language[-2])

language[0:2]
 language[1:4]

language2 = "C" + language[1:]
print(language)
print(language2)



"""## **Data Structures**
- list [ ]
- tuple ( )
- dictionary # immutable # unorder # Key-value pair
- set { } # unique items only

"""

# create a new list # เก็บได้หลายประเภทแต่นิยมเก็บแค่ประเภทเดียวเช่น String
shopping_list = ["egg", "milk", "bread", "tomato"]

type(shopping_list)

print(shopping_list[0])
print(shopping_list[1])
print(shopping_list[2])
print(shopping_list[3])
print(shopping_list[-1])

# mutable vs. immutable object
print(shopping_list)

shopping_list[0] = "chicken 1 kg"

print(shopping_list)

## mutable => list, dictionary
## immutable => tuple, str

# Part 2 Leggo!!

shopping_list = ["egg", "milk", "bread", "tomato"]

# list method (function designed for list)

shopping_list.append("pizza")
print(shopping_list)

# delete last item
shopping_list.pop()
print(shopping_list)

shopping_list.append('egg')
print(shopping_list)

shopping_list.count("egg")

shopping_list.sort(reverse=True) # descending order Z->A
shopping_list

shopping_list.remove("milk")
shopping_list

shopping_list.insert(1, "milk")
shopping_list

"""## **Control Flow**
- for
- while
- ifelse
"""

shopping_list = [
    ("egg", 10), 
    ("milk", 5),
    ("bread", 20),
    ("tomato", 12)
]

print(shopping_list)

for item in shopping_list:
    print(f"Product: {item[0]}  Unit: {item[1]}")

item1 = ('egg', 10)
item2 = ('bread', 5)

print(item1, type(item1))
print(item2, type(item2))

# bonus list comprehension

numbers = [1, 2, 3, 4, 5]

# for loop
new_numbers = []

for num in numbers:
    new_numbers.append(num*2)

print(new_numbers)

# list comprehension
numbers = [1, 2, 3, 4, 5]
new_numbers = [num*2 for num in numbers]

print(new_numbers)

# tuple
students = [
    (1, 'toy', 'bangkok'),
    (2, 'david', 'london'),
    (3, 'anna', 'madrid')
]

for student in students:
    print(f"ID: {student[0]}  Name: {student[1]}  City: {student[2].upper()}")

# example of set
food_set = {'pizza', 'chicken', 'coke', 'coke', 'pizza'}

food_set

len(food_set)

# dictionary
# key-value pair
# key ห้ามซ้ำกัน

customer ={
    "name": "Chaem",
    "age": 25,
    "location": "Bangkok",
    "movie_lover": True,
    "movie_fav": ["Thor", "Iron man", "Superman"],
    "shopping_list": ('egg', 10),
    "books": {"name": "Think like a freak", "year": 2006}
}

customer

customer["books"]["name"]

# for loop in dictionary
for key in customer:
    print(key, ":", customer[key])

for key, value in customer.items():
    print(f"{key}: {value}")



"""## Control Flow (Continue)

- for
- while
- if elif else
"""

whlie True:
    # do somethimg

count = 0

while count < 10:
    print("Hello!")
    count = count + 1

# Game: guess animal name
def guess_animal_name():
    correct_name = "hippo"
    while True:
        user_guess = input("Guess the animal name: ")
        if user_guess == correct_name:
            print("Congratulations!")
            break
        else:
            print("Please try again :)")

guess_animal_name()

# if-else

score = 25

if score >= 80:
    print("Passed")
elif score >= 70:
    print("B")
elif score >= 60:
    print("C")
elif score >= 50:
    print("D")
else:
    print("Failed")

def grading(score):
    if score >= 80:
        return "A"
    elif score >= 70:
        return "B"
    elif score >= 60:
        return "C"
    elif score >= 50:
        return "D"
    else:
        return "Failed"

grading(55)

scores = [90, 85, 72, 82, 65]

grades =[]
for score in scores:
    result = grading(score)
    grades.append( (result,score) )

print(grades)

# functional programming
scores = [90, 85, 72, 82, 65]

new_grade = list(map(grading, scores))
print(new_grade)

grades = [grading(score) for score in scores]

print(grades)

# if else ~ and, or, not

day = "Monday"
time = "4pm"

if day == "Monday" and time == "2pm":
    print("Coffee")
else:
    print("Whatever I have")

"""## **OOP**

Object Oriented Programming

`class` to create new Class
- Represent whatever object
"""

class Dog:
    # constructor => in python call initialization 
    def __init__(self, name, age, species, energy):
        self.name = name
        self.age = age
        self.species = species
        self.energy = energy

    def __str__(self):
        return "I'm a dog :P"   

    # Dog methods (function designed for a dog)
    def greeting(self):
        print(f"Hi! my name is {self.name}! and I'm {self.species}.")

    def eating(self, food):
        print(f"I'm eatiing {food} and it's delicious!")

    def play(self, activity):
        if activity == 'sleeping':
            self.energy += 10 # or self.energy = self.energy+10
        elif activity == 'running':
            self.energy -= 20
        else:
            self.energy -= 5
        print(f"Energy Level: {self.energy}")

# create instances
dog1 = Dog("Stang", 7, "Labador", 100)
dog1.greeting()
dog1.eating("sausage")

dog1.play("eating")

dog1.energy

print(dog1) # def __str__(self)

print(dog1.name, dog2.name)
print(dog1.species, dog2.species)
print(dog1.age, dog2.age)



"""## **Homework**

1. เป่ายิ๊งฉุบ Python
2. class ATM
##### 5 ATM methods
- รับเงินฝาก
- ถอนเงินฝาก
- เช็คยอด
- method4
- method5

Optional - Class Restauurant

"""

